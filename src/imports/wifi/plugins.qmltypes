import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable WiFi 1.0 -dependencies dependencies.json'

Module {
    dependencies: ["QtQuick 2.8", "QtQuick.Window 2.2"]
    Component {
        name: "QAbstractProxyModel"
        prototype: "QAbstractItemModel"
        Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
        Method {
            name: "mapToSource"
            type: "QModelIndex"
            Parameter { name: "proxyIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapFromSource"
            type: "QModelIndex"
            Parameter { name: "sourceIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapSelectionToSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
        Method {
            name: "mapSelectionFromSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
    }
    Component {
        name: "QQuickWiFiManager"
        prototype: "QObject"
        exports: ["WiFi/WiFiManager 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "isWiFiEnabled"; type: "bool" }
        Property { name: "macAddress"; type: "string"; isReadonly: true }
        Property { name: "bssid"; type: "string"; isReadonly: true }
        Property { name: "ssid"; type: "string"; isReadonly: true }
        Property { name: "rssi"; type: "short"; isReadonly: true }
        Property { name: "frequency"; type: "int"; isReadonly: true }
        Property { name: "ipAddress"; type: "string"; isReadonly: true }
        Method {
            name: "addNetwork"
            Parameter { name: "ssid"; type: "string" }
            Parameter { name: "password"; type: "string" }
        }
    }
    Component {
        name: "QQuickWiFiScanResultModel"
        prototype: "QAbstractListModel"
        exports: ["WiFi/WiFiScanResultModel 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QQuickWiFiSortFilterModel"
        prototype: "QSortFilterProxyModel"
        exports: ["WiFi/WiFiSortFilterModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "FilterSyntax"
            values: {
                "RegExp": 0,
                "Wildcard": 1,
                "FixedString": 2
            }
        }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "source"; type: "QObject"; isPointer: true }
        Property { name: "sortRole"; type: "QByteArray" }
        Property { name: "sortOrder"; type: "Qt::SortOrder" }
        Property { name: "filterRole"; type: "QByteArray" }
        Property { name: "filterString"; type: "string" }
        Property { name: "filterSyntax"; type: "FilterSyntax" }
        Method {
            name: "get"
            type: "QJSValue"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "QSortFilterProxyModel"
        prototype: "QAbstractProxyModel"
        Property { name: "filterRegExp"; type: "QRegExp" }
        Property { name: "filterKeyColumn"; type: "int" }
        Property { name: "dynamicSortFilter"; type: "bool" }
        Property { name: "filterCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "sortCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "isSortLocaleAware"; type: "bool" }
        Property { name: "sortRole"; type: "int" }
        Property { name: "filterRole"; type: "int" }
        Method {
            name: "setFilterRegExp"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterWildcard"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterFixedString"
            Parameter { name: "pattern"; type: "string" }
        }
        Method { name: "clear" }
        Method { name: "invalidate" }
    }
}
